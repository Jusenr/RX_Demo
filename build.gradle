// Top-level build file where you can add configuration options common to all sub-projects/modules.
description = 'This is project build.gradle.'

buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}


allprojects {
    repositories {
        jcenter()
        google()
        maven { url "https://jitpack.io" }
//        maven { url "https://dl.bintray.com/jusenr/maven/" }
        //AAR local library dependencies
        flatDir {
            dirs 'libs'
        }
    }
    //Set unified encoding
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        //Enabling the compilation of a single daemon
        options.fork = true
        //Incremental compiling
        options.incremental = true
    }
    //Setting unified javaDoc encoding
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
        options.addStringOption('link', 'http://docs.oracle.com/javase/7/docs/api')
        options.addStringOption('windowtitle', 'androidtools')
        options.addBooleanOption('author', true)
        options.addBooleanOption('version', true)
    }
}

subprojects {
    configurations.all {
        resolutionStrategy {
//            force 'com.android.support:support-v4:23.0.1'
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//Get version number
def getVersionName() {
    int num = rootProject.properties["PROJ_VERSION_NUM"] as int
    if (num > 0) {
        return String.format("%s.%d", project.properties["PROJ_VERSIONNAME"], num)
    } else {
        return project.properties["PROJ_VERSIONNAME"]
    }
}
//Git commit times
int gitVersionCode() {
    if (System.getenv("CI_BUILD")) {
        return rootProject.ext.androids.versionCode
    }
    def count = "git rev-list HEAD --count".execute().text.trim()
    return count.isInteger() ? count.toInteger() : 0
}
//Get current time
def releaseTime(def format) {
    return new Date().format(format)
}

ext {
    APP_LOG_TAG = "RX_demo"//app打印日志的tag

    MANIFESTPLACEHOLDERS = [UMENG_APPKEY_VALUE: "59f03fd8b27b0a282f000013"]
}